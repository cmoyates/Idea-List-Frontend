{"version":3,"sources":["pages/Home.js","App.js","reportWebVitals.js","index.js"],"names":["socket","Home","props","useState","suggestions","setSuggestions","fetchSuggestions","a","url","console","log","fetch","method","headers","res","json","data","Intl","DateTimeFormat","resolvedOptions","timeZone","useEffect","io","emit","disconnect","off","on","suggestion","Grid","container","direction","justifyContent","alignItems","item","Paper","style","width","maxWidth","marginBottom","List","length","ListItem","ListItemText","map","index","date","Date","ts","content","user_name","toLocaleString","Divider","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sJAWIA,E,sKAiGWC,EA/FF,SAACC,GAAW,IAAD,EAEkBC,mBAAS,IAF3B,mBAEbC,EAFa,KAEAC,EAFA,OAGYF,mBAAS,IAHrB,gCAIUA,mBAAS,KAJnB,mBAuBdG,GAvBc,UAuBE,uCAAG,gCAAAC,EAAA,6DACfC,EAAM,uDACZC,QAAQC,IAAIF,GAFS,SAGHG,MAAMH,EAAK,CACzBI,OAAQ,MACRC,QAAU,CACN,eAAgB,mBAChB,OAAU,sBAPG,cAGfC,EAHe,gBAUFA,EAAIC,OAVF,OAUfC,EAVe,OAWrBP,QAAQC,IAAIM,GACZX,EAAeW,GACfP,QAAQC,IAAIO,KAAKC,iBAAiBC,kBAAkBC,UAb/B,4CAAH,sDAwCtB,OAxBAC,qBAAU,WAWN,OAVAf,IAEAN,EAASsB,IApCI,2CAsCbb,QAAQC,IAAIV,GAEZA,EAAOuB,KAAK,QAAQ,WAChBd,QAAQC,IAAI,oCAGT,WACHV,EAAOwB,aACPxB,EAAOyB,SAGb,IAEFJ,qBAAU,WACNrB,EAAOyB,IAAI,mBAAmBC,GAAG,mBAAmB,SAACC,GACjDtB,EAAe,CAACsB,GAAF,mBAAiBvB,WAKnC,cAACwB,EAAA,EAAD,CAAMC,WAAS,EAACC,UAAU,SAASC,eAAe,SAASC,WAAW,SAAtE,SACI,eAACJ,EAAA,EAAD,CAAMK,MAAI,EAAV,UACA,2CACI,cAACC,EAAA,EAAD,CAAOC,MAAO,CAACC,MAAO,IAAKC,SAAU,IAAKC,aAAc,IAAxD,SACI,cAACC,EAAA,EAAD,UAC6B,IAAvBnC,EAAYoC,OACT,cAACC,EAAA,EAAD,UACG,cAACC,EAAA,EAAD,0CAEJtC,EAAYuC,KAAI,SAACV,EAAMW,GAEnB,IAAMC,EAAO,IAAIC,KAAKb,EAAKc,IAE3B,OAAQ,gCACJ,cAACN,EAAA,EAAD,UACI,eAACC,EAAA,EAAD,WACI,oBAAIP,MAAO,CAACG,cAAe,GAA3B,SAAgCL,EAAKe,UACpCf,EAAKgB,UAFV,MAEwBJ,EAAKK,sBAG/B9C,EAAYwC,EAAQ,GAAM,cAACO,EAAA,EAAD,IAAa,OAP3BP,gBC/EnCQ,MARf,WACE,OACE,qBAAKC,UAAU,MAAf,SACE,cAAC,EAAD,OCMSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.b3c3ee9f.chunk.js","sourcesContent":["import React, {useState, useEffect} from 'react'\r\nimport TextField from '@material-ui/core/TextField';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Button from '@material-ui/core/Button';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport io from 'socket.io-client';\r\n\r\nlet socket;\r\n\r\nconst Home = (props) => {\r\n\r\n    const [suggestions, setSuggestions] = useState([]);\r\n    const [username, setUsername] = useState(\"\");\r\n    const [content, setContent] = useState(\"\");\r\n\r\n    const ENDPOINT = \"https://still-sands-81765.herokuapp.com\";\r\n\r\n    const submitSuggestion = async (suggestion) => {\r\n        console.log(\"So far so good\");\r\n        await fetch(\"https://still-sands-81765.herokuapp.com/suggestions/\", {\r\n            method: \"POST\",\r\n            headers : { \r\n                'Content-Type': 'application/json',\r\n                'Accept': 'application/json'\r\n            },\r\n            body: JSON.stringify(suggestion)\r\n        });\r\n        console.log(\"Suggestion submitted!\");\r\n        console.log(suggestion);\r\n        await fetchSuggestions();\r\n    }\r\n\r\n    const fetchSuggestions = async () => {\r\n        const url = \"https://still-sands-81765.herokuapp.com/suggestions/\";\r\n        console.log(url);\r\n        const res = await fetch(url, {\r\n            method: \"GET\",\r\n            headers : { \r\n                'Content-Type': 'application/json',\r\n                'Accept': 'application/json'\r\n            }\r\n        });\r\n        const data = await res.json();\r\n        console.log(data);\r\n        setSuggestions(data);\r\n        console.log(Intl.DateTimeFormat().resolvedOptions().timeZone);\r\n    }\r\n\r\n    useEffect(() => {\r\n        fetchSuggestions();\r\n\r\n        socket = io(ENDPOINT);\r\n\r\n        console.log(socket);\r\n\r\n        socket.emit('join', () => {\r\n            console.log(\"Socket connection established\");\r\n        });\r\n\r\n        return () => {\r\n            socket.disconnect();\r\n            socket.off();\r\n        }\r\n\r\n    },[]);\r\n\r\n    useEffect(() => {\r\n        socket.off('suggestionAdded').on('suggestionAdded', (suggestion) => {\r\n            setSuggestions([suggestion, ...suggestions]);\r\n        })\r\n    })\r\n\r\n    return (\r\n        <Grid container direction=\"column\" justifyContent=\"center\" alignItems=\"center\">\r\n            <Grid item>\r\n            <h1>Idea List</h1>\r\n                <Paper style={{width: 600, maxWidth: 600, marginBottom: 20}}>\r\n                    <List>\r\n                        {(suggestions.length === 0) ? \r\n                            (<ListItem>\r\n                                <ListItemText>You don't have any ideas!</ListItemText>\r\n                            </ListItem>) : \r\n                            suggestions.map((item, index) => {\r\n\r\n                                const date = new Date(item.ts);\r\n\r\n                                return (<div key={index}>\r\n                                    <ListItem>\r\n                                        <ListItemText>\r\n                                            <h2 style={{marginBottom: -5}}>{item.content}</h2>\r\n                                            {item.user_name} @ {date.toLocaleString()}\r\n                                        </ListItemText>\r\n                                    </ListItem>\r\n                                    {(suggestions[index + 1]) ? <Divider/> : null}\r\n                                </div>)\r\n                            })\r\n                        }\r\n                    </List>\r\n                </Paper>\r\n            </Grid>\r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default Home\r\n\r\n\r\n\r\n\r\n/*<Grid item>\r\n    <br/>\r\n    <TextField\r\n    label=\"Username\"\r\n    variant=\"outlined\"\r\n    autoComplete='off'\r\n    value={username}\r\n    onChange={(event) => {\r\n        setUsername(event.target.value);\r\n    }}\r\n    />\r\n    <br/>\r\n    <br/>\r\n    <TextField\r\n    label=\"Suggestion\"\r\n    variant=\"outlined\"\r\n    autoComplete='off'\r\n    autoFocus\r\n    multiline\r\n    value={content}\r\n    onChange={(event) => {\r\n        setContent(event.target.value);\r\n    }}\r\n    />\r\n    <br/>\r\n    <br/>\r\n    <Button onClick={async ()=>{\r\n        await submitSuggestion({user_name: username, content});\r\n    }}>Submit</Button>\r\n</Grid>*/","import './App.css';\nimport Home from './pages/Home';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Home/>\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}